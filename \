from collections import deque 

class Frontier:
	
	queue = None
	numberOfNodes = 0

		
        def add(self,nodeToAdd):

		self.queue=deque.append(nodeToAdd)
		self.numberOfNodes = numberOfNode + 1

class InitialNode:
		
	state = [[1,2,5],[3,4,0],[6,7,8]]
	stepCost = 1
	action   = "NoAction"
	pathCost = 0

	

class TargetNode:
		
	state = [[0,1,2],[3,4,5],[6,7,8]]


	def goalTest(self,testNode):
	
		if(testNode.state==self.state):

			return True
		else:
			return False
		
class Node(InitialNode):

	state        = list()
	parentState  = list()
	pathCost     = 0
	action       = ""

        
	
	def __init__(self,parentNode): ## expansion mean initial a new Node from a node in the Frontier
		
					
		self.parentState = parentNode.state
		self.action      = parentNode.action
		self.pathCost    = parentNode.pathCost + 1
		self.state       = self.childNode(parentNode.state,parentNode.action)
	
	def childNode(self,inputState,inputAction):

		currentdoor  = 0
                currentfloor = 0

		for row in inputState:
			
 			try:
				print("found @ " + str(row.index(0)) + " in row " + str(row) + "@" + str(inputState.index(row)))
				currentdoor = row.index(0)
				currentfloor = inputState.index(row)
         
			except ValueError:
			
				continue 

			print(str(currentdoor)  + "currentdoor")
			print(str(currentfloor) + "currentfloor");
   

		if(inputAction=="Up"and currentfloor <> 0):

                        temp = inputState[currentfloor-1][currentdoor]
			inputState[currentfloor][currentdoor] =(temp)
			inputState[currentfloor-1][currentdoor]
			print(str(inputState))		
           		return None

		



node = Node(InitialNode)
print(node.state)
print(node.pathCost)
print(node.parentState)
print(node.action)
node.childNode(node.parentState,"Up")
print(node.state)

